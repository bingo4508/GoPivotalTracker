#!/usr/bin/env node
/* eslint-disable no-console */

const beautify = require('js-beautify').js_beautify;
const { execSync } = require('child_process');
const columnify = require('columnify');
const CronJob = require('cron').CronJob;
const fs = require('fs');
const moment = require('moment-timezone');
const path = require('path');
const program = require('commander');
const range = require('lodash').range;
const Tracker = require('../');

const HOME_DIR = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;


/* 
 * Hack to replace terminal-notifier icon
 * ref: https://github.com/mikaelbr/node-notifier/issues/71
 */
const cwd = path.join(__dirname, '..', 'node_modules/node-notifier/vendor/terminal-notifier.app/Contents');
const iconPath = path.join(__dirname, '..', 'resources/gopivotaltracker.icns');
const targetIconPath = path.join(cwd, 'Resources/Genius.icns');

if (!fs.existsSync(targetIconPath)) {
    execSync('sed -i -- \'s/terminal-notifier/genius-notifier/g\' Info.plist', { cwd });
    execSync('sed -i -- \'s/Terminal/Genius/g\' Info.plist', { cwd });
    execSync('rm Resources/Terminal.icns', { cwd });
    execSync(`cp ${iconPath} ${targetIconPath}`);
}


/*
 * Settings
 */

function processHours(hours) {
    let results = [];
    const arr = hours.split(',');

    arr.forEach((e) => {
        const arr2 = e.split('-');
        const length = arr2.length;

        if (length > 1) {
            results = results.concat(range(arr2[0], arr2[length - 1]));
        } else {
            results.push(Number(arr2[0]));
        }
    });

    return new Set(results);
}

const SETTINGS = path.join(HOME_DIR, '.gopivotaltracker.settings');
const settings = fs.existsSync(SETTINGS) ? JSON.parse(fs.readFileSync(SETTINGS)) : {};

program
    .version('0.0.3')
    .option('-t, --token <string>', 'Set API token (required at first time)')
    .option('-p, --project <string>', 'Set project name (required at first time)')
    .option('-f, --frequency <string>', 'Set tracking freqeuncy in minuites (default=10)')
    .option('-h, --hours <string>', 'Set tracking hours (default=10-13,14-19')
    .option('-w, --weekdays <string>', 'Set tracking weekdays (default=1-5)')
    .option('-z, --timezone <string>', 'Set timezone (default=your local timezone)')
    .option('--autounstart', 'Auto unstart all stories at the end of tracking time everyday')
    .parse(process.argv);

const token = program.token || settings.token;
const project = program.project || settings.project;
const frequency = program.frequency || settings.frequency || 10;
const hours = program.hours || settings.hours || '10-13,14-19';
const weekdays = program.weekdays || settings.weekdays || '1-5';
const timezone = program.timezone || settings.timezone || moment.tz.guess();
const autounstart = program.autounstart || settings.autounstart || false;

const trackCronPattern = `0 0-59/${frequency} ${hours} * * ${weekdays}`;
const hoursSet = processHours(hours);
const unstartHour = Math.max.apply(null, Array.from(hoursSet)) + 1;

if (!token || !project) {
    console.error('token or project missing');

    process.exit(1);
}

// Save settings then next time don't need to specify options
if (
    program.token || program.project || program.frequency ||
    program.hours || program.weekdays || program.timezone ||
    program.autounstart
) {
    fs.writeFileSync(SETTINGS, beautify(JSON.stringify({
        token,
        project,
        frequency,
        hours,
        weekdays,
        timezone,
        autounstart,
    })));
}

const settingMsg = {
    'API token:':  token,
    'Project name:': project,
    'Tracking frequency:': `Every ${frequency} mins`,
    'Tracking hours:': hours,
    'Tracking weekdays:': weekdays,
    'Timezone:': timezone,
    'Autounstart:': autounstart,
};

if (autounstart) {
    settingMsg['Unstart time:'] = unstartHour;
}

console.log('\n' + columnify(settingMsg, {columns: ['option', 'value']}) + '\n');


/*
 * Start running
 */
const tracker = new Tracker({
    apiToken: token,
    projectName: project,
});

try {
    // Start cron job
    new CronJob(trackCronPattern, function() {
        const currentHour = moment().tz(timezone).hour();
        const currentTime = moment().format('dddd h:mm a');

        // Double-check in case CronbJob is naughty
        if (hoursSet.has(currentHour)) {
            tracker.checkStartedStoriesStatus()
                .then(() => {
                    console.log(`Check: ${currentTime}`);
                })
                .catch((err) => {
                    console.log(`Fail to check: ${currentTime}`);
                })
        }

        if (autounstart && (currentHour == unstartHour)) {
            tracker.unstartAllStories()
                .then(() => {
                    console.log(`Unstart: ${currentTime}`);

                    process.exit(0);
                })
                .catch((err) => {
                    console.log(`Fail to unstart: ${currentTime}`);

                    process.exit(1);
                })

        }
    }, function() {
    }, true, timezone);
} catch(err) {
    console.error(`Invalid cron pattern - ${trackCronPattern}`);

    process.exit(1);
}

console.log('running...\n');
